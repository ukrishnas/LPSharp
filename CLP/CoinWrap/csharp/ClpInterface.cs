//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CoinOr.Clp {

public class DoubleVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<double>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DoubleVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DoubleVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DoubleVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          coinwrapPINVOKE.delete_DoubleVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DoubleVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (double element in c) {
      this.Add(element);
    }
  }

  public DoubleVector(global::System.Collections.Generic.IEnumerable<double> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (double element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public double this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(double[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(double[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, double[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public double[] ToArray() {
    double[] array = new double[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<double> global::System.Collections.Generic.IEnumerable<double>.GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  public DoubleVectorEnumerator GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class DoubleVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<double>
  {
    private DoubleVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public DoubleVectorEnumerator(DoubleVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public double Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (double)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    coinwrapPINVOKE.DoubleVector_Clear(swigCPtr);
  }

  public void Add(double x) {
    coinwrapPINVOKE.DoubleVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = coinwrapPINVOKE.DoubleVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = coinwrapPINVOKE.DoubleVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    coinwrapPINVOKE.DoubleVector_reserve(swigCPtr, n);
  }

  public DoubleVector() : this(coinwrapPINVOKE.new_DoubleVector__SWIG_0(), true) {
  }

  public DoubleVector(DoubleVector other) : this(coinwrapPINVOKE.new_DoubleVector__SWIG_1(DoubleVector.getCPtr(other)), true) {
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector(int capacity) : this(coinwrapPINVOKE.new_DoubleVector__SWIG_2(capacity), true) {
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  private double getitemcopy(int index) {
    double ret = coinwrapPINVOKE.DoubleVector_getitemcopy(swigCPtr, index);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private double getitem(int index) {
    double ret = coinwrapPINVOKE.DoubleVector_getitem(swigCPtr, index);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, double val) {
    coinwrapPINVOKE.DoubleVector_setitem(swigCPtr, index, val);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(DoubleVector values) {
    coinwrapPINVOKE.DoubleVector_AddRange(swigCPtr, DoubleVector.getCPtr(values));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = coinwrapPINVOKE.DoubleVector_GetRange(swigCPtr, index, count);
    DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, double x) {
    coinwrapPINVOKE.DoubleVector_Insert(swigCPtr, index, x);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, DoubleVector values) {
    coinwrapPINVOKE.DoubleVector_InsertRange(swigCPtr, index, DoubleVector.getCPtr(values));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    coinwrapPINVOKE.DoubleVector_RemoveAt(swigCPtr, index);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    coinwrapPINVOKE.DoubleVector_RemoveRange(swigCPtr, index, count);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static DoubleVector Repeat(double value, int count) {
    global::System.IntPtr cPtr = coinwrapPINVOKE.DoubleVector_Repeat(value, count);
    DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    coinwrapPINVOKE.DoubleVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    coinwrapPINVOKE.DoubleVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, DoubleVector values) {
    coinwrapPINVOKE.DoubleVector_SetRange(swigCPtr, index, DoubleVector.getCPtr(values));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(double value) {
    bool ret = coinwrapPINVOKE.DoubleVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(double value) {
    int ret = coinwrapPINVOKE.DoubleVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(double value) {
    int ret = coinwrapPINVOKE.DoubleVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(double value) {
    bool ret = coinwrapPINVOKE.DoubleVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace CoinOr.Clp {

public enum PivotAlgorithm {
  Automatic = 0,
  ExactDevex,
  PartialDevex,
  Steepest,
  PositiveEdgeSteepest
}

}
namespace CoinOr.Clp {

public enum StartingBasis {
  Default = 0,
  AllSlack,
  Crash,
  Idiot,
  Sprint,
  Other
}

}
namespace CoinOr.Clp {

public enum SolveType {
  Dual = 0,
  Primal,
  Either,
  Barrier
}

}
namespace CoinOr.Clp {

public enum ClpStatus {
  Unknown = -1,
  Optimal = 0,
  PrimalFeasible = 1,
  DualFeasible = 2,
  StoppedDueToLimits = 3,
  StoppedDueToErrors = 4,
  StoppedByEventHandler = 5
}

}
namespace CoinOr.Clp {

public class ClpInterface : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClpInterface(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClpInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ClpInterface() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          coinwrapPINVOKE.delete_ClpInterface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ClpInterface() : this(coinwrapPINVOKE.new_ClpInterface(), true) {
  }

  public double OptimizationDirection() {
    double ret = coinwrapPINVOKE.ClpInterface_OptimizationDirection(swigCPtr);
    return ret;
  }

  public void SetOptimizationDirection(double value) {
    coinwrapPINVOKE.ClpInterface_SetOptimizationDirection(swigCPtr, value);
  }

  public double DualTolerance() {
    double ret = coinwrapPINVOKE.ClpInterface_DualTolerance(swigCPtr);
    return ret;
  }

  public void SetDualTolerance(double value) {
    coinwrapPINVOKE.ClpInterface_SetDualTolerance(swigCPtr, value);
  }

  public double PrimalTolerance() {
    double ret = coinwrapPINVOKE.ClpInterface_PrimalTolerance(swigCPtr);
    return ret;
  }

  public void SetPrimalTolerance(double value) {
    coinwrapPINVOKE.ClpInterface_SetPrimalTolerance(swigCPtr, value);
  }

  public double PrimalWeight() {
    double ret = coinwrapPINVOKE.ClpInterface_PrimalWeight(swigCPtr);
    return ret;
  }

  public void SetPrimalWeight(double value) {
    coinwrapPINVOKE.ClpInterface_SetPrimalWeight(swigCPtr, value);
  }

  public double PositiveEdgePsi() {
    double ret = coinwrapPINVOKE.ClpInterface_PositiveEdgePsi(swigCPtr);
    return ret;
  }

  public void SetPositiveEdgePsi(double value) {
    coinwrapPINVOKE.ClpInterface_SetPositiveEdgePsi(swigCPtr, value);
  }

  public int Perturbation() {
    int ret = coinwrapPINVOKE.ClpInterface_Perturbation(swigCPtr);
    return ret;
  }

  public void SetPerturbation(int value) {
    coinwrapPINVOKE.ClpInterface_SetPerturbation(swigCPtr, value);
  }

  public int MaximumIterations() {
    int ret = coinwrapPINVOKE.ClpInterface_MaximumIterations(swigCPtr);
    return ret;
  }

  public void SetMaximumIterations(int value) {
    coinwrapPINVOKE.ClpInterface_SetMaximumIterations(swigCPtr, value);
  }

  public double MaximumSeconds() {
    double ret = coinwrapPINVOKE.ClpInterface_MaximumSeconds(swigCPtr);
    return ret;
  }

  public void SetMaximumSeconds(double value) {
    coinwrapPINVOKE.ClpInterface_SetMaximumSeconds(swigCPtr, value);
  }

  public double SolveTimeMs() {
    double ret = coinwrapPINVOKE.ClpInterface_SolveTimeMs(swigCPtr);
    return ret;
  }

  public void SetLogLevel(int level) {
    coinwrapPINVOKE.ClpInterface_SetLogLevel(swigCPtr, level);
  }

  public void Reset() {
    coinwrapPINVOKE.ClpInterface_Reset(swigCPtr);
  }

  public bool ReadMps(string filename) {
    bool ret = coinwrapPINVOKE.ClpInterface_ReadMps(swigCPtr, filename);
    return ret;
  }

  public void WriteMps(string filename) {
    coinwrapPINVOKE.ClpInterface_WriteMps(swigCPtr, filename);
  }

  public bool SetPrimalPivotAlgorithm(PivotAlgorithm pivot_algorithm) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetPrimalPivotAlgorithm(swigCPtr, (int)pivot_algorithm);
    return ret;
  }

  public bool SetDualPivotAlgorithm(PivotAlgorithm pivot_algorithm) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetDualPivotAlgorithm(swigCPtr, (int)pivot_algorithm);
    return ret;
  }

  public int PresolvePasses() {
    int ret = coinwrapPINVOKE.ClpInterface_PresolvePasses(swigCPtr);
    return ret;
  }

  public void SetPresolvePasses(int passes) {
    coinwrapPINVOKE.ClpInterface_SetPresolvePasses(swigCPtr, passes);
  }

  public void MakePlusMinusOneMatrix(bool enable) {
    coinwrapPINVOKE.ClpInterface_MakePlusMinusOneMatrix(swigCPtr, enable);
  }

  public StartingBasis DualStartingBasis() {
    StartingBasis ret = (StartingBasis)coinwrapPINVOKE.ClpInterface_DualStartingBasis(swigCPtr);
    return ret;
  }

  public bool SetDualStartingBasis(StartingBasis basis) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetDualStartingBasis(swigCPtr, (int)basis);
    return ret;
  }

  public StartingBasis PrimalStartingBasis() {
    StartingBasis ret = (StartingBasis)coinwrapPINVOKE.ClpInterface_PrimalStartingBasis(swigCPtr);
    return ret;
  }

  public bool SetPrimalStartingBasis(StartingBasis basis) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetPrimalStartingBasis(swigCPtr, (int)basis);
    return ret;
  }

  public SolveType GetSolveType() {
    SolveType ret = (SolveType)coinwrapPINVOKE.ClpInterface_GetSolveType(swigCPtr);
    return ret;
  }

  public void SetSolveType(SolveType solve_type) {
    coinwrapPINVOKE.ClpInterface_SetSolveType(swigCPtr, (int)solve_type);
  }

  public void Solve() {
    coinwrapPINVOKE.ClpInterface_Solve(swigCPtr);
  }

  public void SolveUsingDualSimplex() {
    coinwrapPINVOKE.ClpInterface_SolveUsingDualSimplex(swigCPtr);
  }

  public void SolveUsingDualCrash() {
    coinwrapPINVOKE.ClpInterface_SolveUsingDualCrash(swigCPtr);
  }

  public void SolveUsingPrimalSimplex() {
    coinwrapPINVOKE.ClpInterface_SolveUsingPrimalSimplex(swigCPtr);
  }

  public void SolveUsingPrimalIdiot() {
    coinwrapPINVOKE.ClpInterface_SolveUsingPrimalIdiot(swigCPtr);
  }

  public void SolveUsingEitherSimplex() {
    coinwrapPINVOKE.ClpInterface_SolveUsingEitherSimplex(swigCPtr);
  }

  public void SolveUsingBarrierMethod() {
    coinwrapPINVOKE.ClpInterface_SolveUsingBarrierMethod(swigCPtr);
  }

  public double ObjectiveValue() {
    double ret = coinwrapPINVOKE.ClpInterface_ObjectiveValue(swigCPtr);
    return ret;
  }

  public int Iterations() {
    int ret = coinwrapPINVOKE.ClpInterface_Iterations(swigCPtr);
    return ret;
  }

  public ClpStatus Status() {
    ClpStatus ret = (ClpStatus)coinwrapPINVOKE.ClpInterface_Status(swigCPtr);
    return ret;
  }

  public int SecondaryStatus() {
    int ret = coinwrapPINVOKE.ClpInterface_SecondaryStatus(swigCPtr);
    return ret;
  }

  public void PrimalColumnSolution(DoubleVector vec) {
    coinwrapPINVOKE.ClpInterface_PrimalColumnSolution(swigCPtr, DoubleVector.getCPtr(vec));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DualColumnSolution(DoubleVector vec) {
    coinwrapPINVOKE.ClpInterface_DualColumnSolution(swigCPtr, DoubleVector.getCPtr(vec));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PrimalRowSolution(DoubleVector vec) {
    coinwrapPINVOKE.ClpInterface_PrimalRowSolution(swigCPtr, DoubleVector.getCPtr(vec));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DualRowSolution(DoubleVector vec) {
    coinwrapPINVOKE.ClpInterface_DualRowSolution(swigCPtr, DoubleVector.getCPtr(vec));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Objective(DoubleVector vec) {
    coinwrapPINVOKE.ClpInterface_Objective(swigCPtr, DoubleVector.getCPtr(vec));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void StartModel() {
    coinwrapPINVOKE.ClpInterface_StartModel(swigCPtr);
  }

  public int AddVariable(string column_name, double lower_bound, double upper_bound) {
    int ret = coinwrapPINVOKE.ClpInterface_AddVariable(swigCPtr, column_name, lower_bound, upper_bound);
    return ret;
  }

  public int AddConstraint(string row_name, double lower_bound, double upper_bound) {
    int ret = coinwrapPINVOKE.ClpInterface_AddConstraint(swigCPtr, row_name, lower_bound, upper_bound);
    return ret;
  }

  public void SetCoefficient(int row_index, int column_index, double value) {
    coinwrapPINVOKE.ClpInterface_SetCoefficient__SWIG_0(swigCPtr, row_index, column_index, value);
  }

  public bool SetCoefficient(string row_name, string column_name, double value) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetCoefficient__SWIG_1(swigCPtr, row_name, column_name, value);
    return ret;
  }

  public void SetObjective(int column_index, double value) {
    coinwrapPINVOKE.ClpInterface_SetObjective__SWIG_0(swigCPtr, column_index, value);
  }

  public bool SetObjective(string column_name, double value) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetObjective__SWIG_1(swigCPtr, column_name, value);
    return ret;
  }

  public void LoadModel() {
    coinwrapPINVOKE.ClpInterface_LoadModel(swigCPtr);
  }

}

}
namespace CoinOr.Clp {

class coinwrapPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="SWIGRegisterExceptionCallbacks_coinwrap")]
    public static extern void SWIGRegisterExceptionCallbacks_coinwrap(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_coinwrap")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_coinwrap(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_coinwrap(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_coinwrap(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="SWIGRegisterStringCallback_coinwrap")]
    public static extern void SWIGRegisterStringCallback_coinwrap(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_coinwrap(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static coinwrapPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Clear___")]
  public static extern void DoubleVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Add___")]
  public static extern void DoubleVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_size___")]
  public static extern uint DoubleVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_capacity___")]
  public static extern uint DoubleVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_reserve___")]
  public static extern void DoubleVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_new_DoubleVector__SWIG_0___")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_new_DoubleVector__SWIG_1___")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_new_DoubleVector__SWIG_2___")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_getitemcopy___")]
  public static extern double DoubleVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_getitem___")]
  public static extern double DoubleVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_setitem___")]
  public static extern void DoubleVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_AddRange___")]
  public static extern void DoubleVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_GetRange___")]
  public static extern global::System.IntPtr DoubleVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Insert___")]
  public static extern void DoubleVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_InsertRange___")]
  public static extern void DoubleVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_RemoveAt___")]
  public static extern void DoubleVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_RemoveRange___")]
  public static extern void DoubleVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Repeat___")]
  public static extern global::System.IntPtr DoubleVector_Repeat(double jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Reverse__SWIG_0___")]
  public static extern void DoubleVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Reverse__SWIG_1___")]
  public static extern void DoubleVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_SetRange___")]
  public static extern void DoubleVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Contains___")]
  public static extern bool DoubleVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_IndexOf___")]
  public static extern int DoubleVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_LastIndexOf___")]
  public static extern int DoubleVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_DoubleVector_Remove___")]
  public static extern bool DoubleVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_delete_DoubleVector___")]
  public static extern void delete_DoubleVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_new_ClpInterface___")]
  public static extern global::System.IntPtr new_ClpInterface();

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_delete_ClpInterface___")]
  public static extern void delete_ClpInterface(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_OptimizationDirection___")]
  public static extern double ClpInterface_OptimizationDirection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetOptimizationDirection___")]
  public static extern void ClpInterface_SetOptimizationDirection(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_DualTolerance___")]
  public static extern double ClpInterface_DualTolerance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetDualTolerance___")]
  public static extern void ClpInterface_SetDualTolerance(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PrimalTolerance___")]
  public static extern double ClpInterface_PrimalTolerance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalTolerance___")]
  public static extern void ClpInterface_SetPrimalTolerance(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PrimalWeight___")]
  public static extern double ClpInterface_PrimalWeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalWeight___")]
  public static extern void ClpInterface_SetPrimalWeight(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PositiveEdgePsi___")]
  public static extern double ClpInterface_PositiveEdgePsi(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPositiveEdgePsi___")]
  public static extern void ClpInterface_SetPositiveEdgePsi(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Perturbation___")]
  public static extern int ClpInterface_Perturbation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPerturbation___")]
  public static extern void ClpInterface_SetPerturbation(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_MaximumIterations___")]
  public static extern int ClpInterface_MaximumIterations(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetMaximumIterations___")]
  public static extern void ClpInterface_SetMaximumIterations(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_MaximumSeconds___")]
  public static extern double ClpInterface_MaximumSeconds(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetMaximumSeconds___")]
  public static extern void ClpInterface_SetMaximumSeconds(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveTimeMs___")]
  public static extern double ClpInterface_SolveTimeMs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetLogLevel___")]
  public static extern void ClpInterface_SetLogLevel(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Reset___")]
  public static extern void ClpInterface_Reset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_ReadMps___")]
  public static extern bool ClpInterface_ReadMps(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_WriteMps___")]
  public static extern void ClpInterface_WriteMps(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalPivotAlgorithm___")]
  public static extern bool ClpInterface_SetPrimalPivotAlgorithm(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetDualPivotAlgorithm___")]
  public static extern bool ClpInterface_SetDualPivotAlgorithm(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PresolvePasses___")]
  public static extern int ClpInterface_PresolvePasses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPresolvePasses___")]
  public static extern void ClpInterface_SetPresolvePasses(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_MakePlusMinusOneMatrix___")]
  public static extern void ClpInterface_MakePlusMinusOneMatrix(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_DualStartingBasis___")]
  public static extern int ClpInterface_DualStartingBasis(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetDualStartingBasis___")]
  public static extern bool ClpInterface_SetDualStartingBasis(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PrimalStartingBasis___")]
  public static extern int ClpInterface_PrimalStartingBasis(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalStartingBasis___")]
  public static extern bool ClpInterface_SetPrimalStartingBasis(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_GetSolveType___")]
  public static extern int ClpInterface_GetSolveType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetSolveType___")]
  public static extern void ClpInterface_SetSolveType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Solve___")]
  public static extern void ClpInterface_Solve(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingDualSimplex___")]
  public static extern void ClpInterface_SolveUsingDualSimplex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingDualCrash___")]
  public static extern void ClpInterface_SolveUsingDualCrash(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingPrimalSimplex___")]
  public static extern void ClpInterface_SolveUsingPrimalSimplex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingPrimalIdiot___")]
  public static extern void ClpInterface_SolveUsingPrimalIdiot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingEitherSimplex___")]
  public static extern void ClpInterface_SolveUsingEitherSimplex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingBarrierMethod___")]
  public static extern void ClpInterface_SolveUsingBarrierMethod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_ObjectiveValue___")]
  public static extern double ClpInterface_ObjectiveValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Iterations___")]
  public static extern int ClpInterface_Iterations(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Status___")]
  public static extern int ClpInterface_Status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SecondaryStatus___")]
  public static extern int ClpInterface_SecondaryStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PrimalColumnSolution___")]
  public static extern void ClpInterface_PrimalColumnSolution(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_DualColumnSolution___")]
  public static extern void ClpInterface_DualColumnSolution(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PrimalRowSolution___")]
  public static extern void ClpInterface_PrimalRowSolution(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_DualRowSolution___")]
  public static extern void ClpInterface_DualRowSolution(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Objective___")]
  public static extern void ClpInterface_Objective(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_StartModel___")]
  public static extern void ClpInterface_StartModel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_AddVariable___")]
  public static extern int ClpInterface_AddVariable(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3, double jarg4);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_AddConstraint___")]
  public static extern int ClpInterface_AddConstraint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3, double jarg4);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetCoefficient__SWIG_0___")]
  public static extern void ClpInterface_SetCoefficient__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, double jarg4);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetCoefficient__SWIG_1___")]
  public static extern bool ClpInterface_SetCoefficient__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, double jarg4);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetObjective__SWIG_0___")]
  public static extern void ClpInterface_SetObjective__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetObjective__SWIG_1___")]
  public static extern bool ClpInterface_SetObjective__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_LoadModel___")]
  public static extern void ClpInterface_LoadModel(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
namespace CoinOr.Clp {

public class coinwrap {
}

}
