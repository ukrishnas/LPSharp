//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CoinOr.Clp {

public enum PivotAlgorithm {
  Automatic = 0,
  ExactDevex,
  PartialDevex,
  Steepest,
  PositiveEdgeSteepest
}

}
namespace CoinOr.Clp {

public enum StartingBasis {
  Default = 0,
  AllSlack,
  Crash,
  Idiot,
  Sprint
}

}
namespace CoinOr.Clp {

public enum SolveType {
  Dual = 0,
  Primal,
  Either,
  Barrier
}

}
namespace CoinOr.Clp {

public enum ClpStatus {
  Unknown = -1,
  Optimal = 0,
  PrimalFeasible = 1,
  DualFeasible = 2,
  StoppedDueToLimits = 3,
  StoppedDueToErrors = 4,
  StoppedByEventHandler = 5
}

}
namespace CoinOr.Clp {

public class ClpInterface : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClpInterface(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClpInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ClpInterface() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          coinwrapPINVOKE.delete_ClpInterface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ClpInterface() : this(coinwrapPINVOKE.new_ClpInterface(), true) {
  }

  public int PresolvePasses() {
    int ret = coinwrapPINVOKE.ClpInterface_PresolvePasses(swigCPtr);
    return ret;
  }

  public void SetPresolvePasses(int value) {
    coinwrapPINVOKE.ClpInterface_SetPresolvePasses(swigCPtr, value);
  }

  public double OptimizationDirection() {
    double ret = coinwrapPINVOKE.ClpInterface_OptimizationDirection(swigCPtr);
    return ret;
  }

  public void SetOptimizationDirection(double value) {
    coinwrapPINVOKE.ClpInterface_SetOptimizationDirection(swigCPtr, value);
  }

  public double DualTolerance() {
    double ret = coinwrapPINVOKE.ClpInterface_DualTolerance(swigCPtr);
    return ret;
  }

  public void SetDualTolerance(double value) {
    coinwrapPINVOKE.ClpInterface_SetDualTolerance(swigCPtr, value);
  }

  public double PrimalTolerance() {
    double ret = coinwrapPINVOKE.ClpInterface_PrimalTolerance(swigCPtr);
    return ret;
  }

  public void SetPrimalTolerance(double value) {
    coinwrapPINVOKE.ClpInterface_SetPrimalTolerance(swigCPtr, value);
  }

  public double PrimalWeight() {
    double ret = coinwrapPINVOKE.ClpInterface_PrimalWeight(swigCPtr);
    return ret;
  }

  public void SetPrimalWeight(double value) {
    coinwrapPINVOKE.ClpInterface_SetPrimalWeight(swigCPtr, value);
  }

  public double PositiveEdgePsi() {
    double ret = coinwrapPINVOKE.ClpInterface_PositiveEdgePsi(swigCPtr);
    return ret;
  }

  public void SetPositiveEdgePsi(double value) {
    coinwrapPINVOKE.ClpInterface_SetPositiveEdgePsi(swigCPtr, value);
  }

  public int Perturbation() {
    int ret = coinwrapPINVOKE.ClpInterface_Perturbation(swigCPtr);
    return ret;
  }

  public void SetPerturbation(int value) {
    coinwrapPINVOKE.ClpInterface_SetPerturbation(swigCPtr, value);
  }

  public int MaximumIterations() {
    int ret = coinwrapPINVOKE.ClpInterface_MaximumIterations(swigCPtr);
    return ret;
  }

  public void SetMaximumIterations(int value) {
    coinwrapPINVOKE.ClpInterface_SetMaximumIterations(swigCPtr, value);
  }

  public double MaximumSeconds() {
    double ret = coinwrapPINVOKE.ClpInterface_MaximumSeconds(swigCPtr);
    return ret;
  }

  public void SetMaximumSeconds(double value) {
    coinwrapPINVOKE.ClpInterface_SetMaximumSeconds(swigCPtr, value);
  }

  public void SetLogLevel(int level) {
    coinwrapPINVOKE.ClpInterface_SetLogLevel(swigCPtr, level);
  }

  public void Reset() {
    coinwrapPINVOKE.ClpInterface_Reset(swigCPtr);
  }

  public bool ReadMps(SWIGTYPE_p_std__string filename) {
    bool ret = coinwrapPINVOKE.ClpInterface_ReadMps(swigCPtr, SWIGTYPE_p_std__string.getCPtr(filename));
    if (coinwrapPINVOKE.SWIGPendingException.Pending) throw coinwrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetPrimalPivotAlgorithm(PivotAlgorithm pivot_algorithm) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetPrimalPivotAlgorithm(swigCPtr, (int)pivot_algorithm);
    return ret;
  }

  public bool SetDualPivotAlgorithm(PivotAlgorithm pivot_algorithm) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetDualPivotAlgorithm(swigCPtr, (int)pivot_algorithm);
    return ret;
  }

  public void SetPresolve(int number) {
    coinwrapPINVOKE.ClpInterface_SetPresolve(swigCPtr, number);
  }

  public void MakePlusMinusOneMatrix(bool enable) {
    coinwrapPINVOKE.ClpInterface_MakePlusMinusOneMatrix(swigCPtr, enable);
  }

  public bool SetDualStartingBasis(StartingBasis basis) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetDualStartingBasis(swigCPtr, (int)basis);
    return ret;
  }

  public bool SetPrimalStartingBasis(StartingBasis basis) {
    bool ret = coinwrapPINVOKE.ClpInterface_SetPrimalStartingBasis(swigCPtr, (int)basis);
    return ret;
  }

  public void SetSolveType(SolveType solve_type) {
    coinwrapPINVOKE.ClpInterface_SetSolveType(swigCPtr, (int)solve_type);
  }

  public void Solve() {
    coinwrapPINVOKE.ClpInterface_Solve(swigCPtr);
  }

  public void SolveUsingDualSimplex() {
    coinwrapPINVOKE.ClpInterface_SolveUsingDualSimplex(swigCPtr);
  }

  public void SolveUsingPrimalSimplex() {
    coinwrapPINVOKE.ClpInterface_SolveUsingPrimalSimplex(swigCPtr);
  }

  public void SolveUsingEitherSimplex() {
    coinwrapPINVOKE.ClpInterface_SolveUsingEitherSimplex(swigCPtr);
  }

  public void SolveUsingBarrierMethod() {
    coinwrapPINVOKE.ClpInterface_SolveUsingBarrierMethod(swigCPtr);
  }

  public void SolveUsingDualCrash() {
    coinwrapPINVOKE.ClpInterface_SolveUsingDualCrash(swigCPtr);
  }

  public void SolveUsingPrimalIdiot() {
    coinwrapPINVOKE.ClpInterface_SolveUsingPrimalIdiot(swigCPtr);
  }

  public double Objective() {
    double ret = coinwrapPINVOKE.ClpInterface_Objective(swigCPtr);
    return ret;
  }

  public int Iterations() {
    int ret = coinwrapPINVOKE.ClpInterface_Iterations(swigCPtr);
    return ret;
  }

  public ClpStatus Status() {
    ClpStatus ret = (ClpStatus)coinwrapPINVOKE.ClpInterface_Status(swigCPtr);
    return ret;
  }

}

}
namespace CoinOr.Clp {

class coinwrapPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="SWIGRegisterExceptionCallbacks_coinwrap")]
    public static extern void SWIGRegisterExceptionCallbacks_coinwrap(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_coinwrap")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_coinwrap(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_coinwrap(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_coinwrap(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="SWIGRegisterStringCallback_coinwrap")]
    public static extern void SWIGRegisterStringCallback_coinwrap(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_coinwrap(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static coinwrapPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_new_ClpInterface___")]
  public static extern global::System.IntPtr new_ClpInterface();

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_delete_ClpInterface___")]
  public static extern void delete_ClpInterface(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PresolvePasses___")]
  public static extern int ClpInterface_PresolvePasses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPresolvePasses___")]
  public static extern void ClpInterface_SetPresolvePasses(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_OptimizationDirection___")]
  public static extern double ClpInterface_OptimizationDirection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetOptimizationDirection___")]
  public static extern void ClpInterface_SetOptimizationDirection(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_DualTolerance___")]
  public static extern double ClpInterface_DualTolerance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetDualTolerance___")]
  public static extern void ClpInterface_SetDualTolerance(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PrimalTolerance___")]
  public static extern double ClpInterface_PrimalTolerance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalTolerance___")]
  public static extern void ClpInterface_SetPrimalTolerance(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PrimalWeight___")]
  public static extern double ClpInterface_PrimalWeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalWeight___")]
  public static extern void ClpInterface_SetPrimalWeight(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_PositiveEdgePsi___")]
  public static extern double ClpInterface_PositiveEdgePsi(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPositiveEdgePsi___")]
  public static extern void ClpInterface_SetPositiveEdgePsi(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Perturbation___")]
  public static extern int ClpInterface_Perturbation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPerturbation___")]
  public static extern void ClpInterface_SetPerturbation(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_MaximumIterations___")]
  public static extern int ClpInterface_MaximumIterations(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetMaximumIterations___")]
  public static extern void ClpInterface_SetMaximumIterations(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_MaximumSeconds___")]
  public static extern double ClpInterface_MaximumSeconds(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetMaximumSeconds___")]
  public static extern void ClpInterface_SetMaximumSeconds(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetLogLevel___")]
  public static extern void ClpInterface_SetLogLevel(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Reset___")]
  public static extern void ClpInterface_Reset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_ReadMps___")]
  public static extern bool ClpInterface_ReadMps(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalPivotAlgorithm___")]
  public static extern bool ClpInterface_SetPrimalPivotAlgorithm(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetDualPivotAlgorithm___")]
  public static extern bool ClpInterface_SetDualPivotAlgorithm(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPresolve___")]
  public static extern void ClpInterface_SetPresolve(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_MakePlusMinusOneMatrix___")]
  public static extern void ClpInterface_MakePlusMinusOneMatrix(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetDualStartingBasis___")]
  public static extern bool ClpInterface_SetDualStartingBasis(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetPrimalStartingBasis___")]
  public static extern bool ClpInterface_SetPrimalStartingBasis(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SetSolveType___")]
  public static extern void ClpInterface_SetSolveType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Solve___")]
  public static extern void ClpInterface_Solve(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingDualSimplex___")]
  public static extern void ClpInterface_SolveUsingDualSimplex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingPrimalSimplex___")]
  public static extern void ClpInterface_SolveUsingPrimalSimplex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingEitherSimplex___")]
  public static extern void ClpInterface_SolveUsingEitherSimplex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingBarrierMethod___")]
  public static extern void ClpInterface_SolveUsingBarrierMethod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingDualCrash___")]
  public static extern void ClpInterface_SolveUsingDualCrash(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_SolveUsingPrimalIdiot___")]
  public static extern void ClpInterface_SolveUsingPrimalIdiot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Objective___")]
  public static extern double ClpInterface_Objective(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Iterations___")]
  public static extern int ClpInterface_Iterations(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("coinwrap", EntryPoint="CSharp_CoinOrfClp_ClpInterface_Status___")]
  public static extern int ClpInterface_Status(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
namespace CoinOr.Clp {

public class coinwrap {
}

}
namespace CoinOr.Clp {

public class SWIGTYPE_p_std__string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
